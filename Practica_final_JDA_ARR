{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Práctica FINAL. MODELOS SUPERVISADOS\n",
    "\n",
    "---\n",
    "\n",
    "JAIME DE CECILIO Y ALFONSO ROMÁN ROVIRA. 4ºE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Machine learning modelo supervisado con Python. Se ha seleccionado la base de datos de los accidentes de coche en canada con la finalidad de realzar un modelo predictivo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se busca dar respuesta a las siguientes preguntas planteadas: \n",
    "\n",
    "- ¿Qué tipos de vehículos (modelos, antigüedad, etc.) y conductores son más propensos a tener accidentes (acción   correctiva en prima)?\n",
    "\n",
    "- ¿Qué tipos de vehículos (modelos, antigüedad, etc.) y conductores son menos propensos a tener accidentes (descuento en prima)?\n",
    "\n",
    "- ¿Qué es lo que más contribuye a que existan fallecimientos en un accidente?\n",
    "\n",
    "- Dado un accidente, ¿se puede generar un modelo que prediga si habrá fallecimientos o no? ¿Si se va a necesitar tratamiento médico o no? Las aseguradoras tienen que inmovilizar capital para pagar estas casuísticas. \n",
    "\n",
    "- Libertad para generar análisis de valor y nuevas ideas. Se debe atacar mínimo un modelo (estimar si habrá fallecidos o no). Hecho esto, se puede plantear de forma opcional otros alcances (libertad para plantear opciones). \n",
    "\n",
    "Plus: complementar con datos abiertos de clima (aunque Canadá es muy grande) y de otra tipología, ¿hay algún tipo de relación con temperaturas medias, precipitación media del día/mes, nieve...? ¿a más días festivos o de vacaciones, más accidentes? etc. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Entrega\n",
    "\n",
    "Hay que realizar la práctica en Python y subirla en un repositorio a Github. No basta con subir el código; hay que explicar lo que se ha hecho de forma suficientemente detallada, preferiblemente con gráficas. La estructura del proyecto es indiferente, puede ser en un archivo .py o en cuadernos de Jupyter .ipynb.\n",
    "\n",
    "Es necesario además realizar un informe en forma de diapositivas o notebook (explicado, no sólo con código y resultados) sobre el proceso realizado y los resultados para su presentación si fuera requerida."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Lb-OMDoDIeaZ"
   },
   "outputs": [],
   "source": [
    "#Librerias con las que vamos a trabajar\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "import seaborn as sns\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import ParameterGrid\n",
    "\n",
    "import multiprocessing\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix, accuracy_score, roc_auc_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from matplotlib.figure import Figure\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yP5y9vqGLHmV"
   },
   "source": [
    "Aseguradora detección de siniestro (problema de clasificación):\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 305
    },
    "id": "_ziQIsIrq8Hg",
    "outputId": "d5f22364-d581-4ec3-f36c-2d8c26796fce"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C_YEAR</th>\n",
       "      <th>C_MNTH</th>\n",
       "      <th>C_WDAY</th>\n",
       "      <th>C_HOUR</th>\n",
       "      <th>C_SEV</th>\n",
       "      <th>C_VEHS</th>\n",
       "      <th>C_CONF</th>\n",
       "      <th>C_RCFG</th>\n",
       "      <th>C_WTHR</th>\n",
       "      <th>C_RSUR</th>\n",
       "      <th>C_RALN</th>\n",
       "      <th>C_TRAF</th>\n",
       "      <th>V_ID</th>\n",
       "      <th>V_TYPE</th>\n",
       "      <th>V_YEAR</th>\n",
       "      <th>P_ID</th>\n",
       "      <th>P_SEX</th>\n",
       "      <th>P_AGE</th>\n",
       "      <th>P_PSN</th>\n",
       "      <th>P_ISEV</th>\n",
       "      <th>P_SAFE</th>\n",
       "      <th>P_USER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1999</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>34</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>03</td>\n",
       "      <td>01</td>\n",
       "      <td>06</td>\n",
       "      <td>1990</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>41</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1999</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>34</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>03</td>\n",
       "      <td>02</td>\n",
       "      <td>01</td>\n",
       "      <td>1987</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1999</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>34</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>03</td>\n",
       "      <td>02</td>\n",
       "      <td>01</td>\n",
       "      <td>1987</td>\n",
       "      <td>02</td>\n",
       "      <td>F</td>\n",
       "      <td>20</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1999</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>08</td>\n",
       "      <td>2</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>UU</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>1986</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>46</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1999</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>08</td>\n",
       "      <td>2</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>UU</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>99</td>\n",
       "      <td>NN</td>\n",
       "      <td>NNNN</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>05</td>\n",
       "      <td>99</td>\n",
       "      <td>2</td>\n",
       "      <td>UU</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   C_YEAR C_MNTH C_WDAY C_HOUR  C_SEV C_VEHS C_CONF C_RCFG C_WTHR C_RSUR  \\\n",
       "0    1999      1      1     20      2     02     34     UU      1      5   \n",
       "1    1999      1      1     20      2     02     34     UU      1      5   \n",
       "2    1999      1      1     20      2     02     34     UU      1      5   \n",
       "3    1999      1      1     08      2     01     01     UU      5      3   \n",
       "4    1999      1      1     08      2     01     01     UU      5      3   \n",
       "\n",
       "  C_RALN C_TRAF V_ID V_TYPE V_YEAR P_ID P_SEX P_AGE P_PSN P_ISEV P_SAFE P_USER  \n",
       "0      3     03   01     06   1990   01     M    41    11      1     UU      1  \n",
       "1      3     03   02     01   1987   01     M    19    11      1     UU      1  \n",
       "2      3     03   02     01   1987   02     F    20    13      2     02      2  \n",
       "3      6     18   01     01   1986   01     M    46    11      1     UU      1  \n",
       "4      6     18   99     NN   NNNN   01     M    05    99      2     UU      3  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cargamos los datos y los visualizamos\n",
    "\n",
    "dataframe = pd.read_csv(\"/Users/jaime2/Desktop/CUNEF/MASTER_DDSS/DATA/SUPERVISADOS/ACCIDENTS/NCDB_1999_to_2014.csv\")\n",
    "\n",
    "#Head\n",
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 739
    },
    "id": "ge1E_ZWvq-Ga",
    "outputId": "33e060d4-fed5-42a0-fee5-057703048e85"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Missing</th>\n",
       "      <th>Missing_rate (%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C_YEAR</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_MNTH</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_WDAY</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_HOUR</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_SEV</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_VEHS</th>\n",
       "      <td>5860402</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_CONF</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_RCFG</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_WTHR</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_RSUR</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_RALN</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C_TRAF</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>V_ID</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>V_TYPE</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>V_YEAR</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_ID</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_SEX</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_AGE</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_PSN</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_ISEV</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_SAFE</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P_USER</th>\n",
       "      <td>5860405</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Total  Missing  Missing_rate (%)\n",
       "C_YEAR  5860405        0               0.0\n",
       "C_MNTH  5860405        0               0.0\n",
       "C_WDAY  5860405        0               0.0\n",
       "C_HOUR  5860405        0               0.0\n",
       "C_SEV   5860405        0               0.0\n",
       "C_VEHS  5860402        3               0.0\n",
       "C_CONF  5860405        0               0.0\n",
       "C_RCFG  5860405        0               0.0\n",
       "C_WTHR  5860405        0               0.0\n",
       "C_RSUR  5860405        0               0.0\n",
       "C_RALN  5860405        0               0.0\n",
       "C_TRAF  5860405        0               0.0\n",
       "V_ID    5860405        0               0.0\n",
       "V_TYPE  5860405        0               0.0\n",
       "V_YEAR  5860405        0               0.0\n",
       "P_ID    5860405        0               0.0\n",
       "P_SEX   5860405        0               0.0\n",
       "P_AGE   5860405        0               0.0\n",
       "P_PSN   5860405        0               0.0\n",
       "P_ISEV  5860405        0               0.0\n",
       "P_SAFE  5860405        0               0.0\n",
       "P_USER  5860405        0               0.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vemos los missing con la siguiente función\n",
    "\n",
    "def missingsummary(dataframe):\n",
    "   total = dataframe.count()\n",
    "   missings = dataframe.isna().sum()\n",
    "   missingsummary = pd.DataFrame(index=total.index, \n",
    "                              data={'Total':total, \n",
    "                                    'Missing':missings,\n",
    "                                    'Missing_rate (%)': round(missings/total * 100, 2)})\n",
    "   return missingsummary\n",
    "missingsummary(dataframe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6Jpcz0iTq-JD",
    "outputId": "8e00b330-bbca-49dd-bfb4-1f9cebe831df"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        C_YEAR  percentage\n",
      "C_YEAR                    \n",
      "1999    413509    7.055980\n",
      "2000    422075    7.202147\n",
      "2001    409389    6.985678\n",
      "2002    420008    7.166877\n",
      "2003    407036    6.945527\n",
      "2004    389050    6.638620\n",
      "2005    386470    6.594595\n",
      "2006    378523    6.458990\n",
      "2007    368507    6.288081\n",
      "2008    338268    5.772093\n",
      "2009    330771    5.644166\n",
      "2010    334555    5.708735\n",
      "2011    325153    5.548303\n",
      "2012    322421    5.501685\n",
      "2013    317058    5.410172\n",
      "2014    297612    5.078352\n",
      "        C_YEAR  percentage\n",
      "C_MNTH                    \n",
      "1       242723    4.141744\n",
      "2       414025    7.064785\n",
      "3       417814    7.129439\n",
      "4       392533    6.698052\n",
      "5       468235    7.989806\n",
      "6       520010    8.873278\n",
      "7       537693    9.175014\n",
      "8       547045    9.334594\n",
      "9       512790    8.750078\n",
      "10      515911    8.803334\n",
      "11      496954    8.479858\n",
      "12      275451    4.700204\n",
      "01      257151    4.387939\n",
      "02        9262    0.158044\n",
      "11        2126    0.036277\n",
      "12      250297    4.270985\n",
      "UU         385    0.006570\n",
      "        C_YEAR  percentage\n",
      "C_WDAY                    \n",
      "1       355515    6.066390\n",
      "2       408828    6.976105\n",
      "3       406094    6.929453\n",
      "4       438388    7.480507\n",
      "5       483641    8.252689\n",
      "6       409812    6.992896\n",
      "7       315770    5.388194\n",
      "1       420497    7.175221\n",
      "2       407437    6.952369\n",
      "3       419466    7.157628\n",
      "4       431265    7.358962\n",
      "5       516084    8.806286\n",
      "6       457376    7.804512\n",
      "7       388909    6.636214\n",
      "U         1323    0.022575\n",
      "        C_YEAR  percentage\n",
      "C_HOUR                    \n",
      "00       88481    1.509810\n",
      "01       73383    1.252183\n",
      "02       77500    1.322434\n",
      "03       64036    1.092689\n",
      "04       39817    0.679424\n",
      "05       44952    0.767046\n",
      "06      106086    1.810216\n",
      "07      207965    3.548646\n",
      "08      302834    5.167459\n",
      "09      227626    3.884134\n",
      "10      248984    4.248580\n",
      "11      301916    5.151794\n",
      "12      368278    6.284173\n",
      "13      367315    6.267741\n",
      "14      397342    6.780112\n",
      "15      492742    8.407985\n",
      "16      519601    8.866298\n",
      "17      500203    8.535297\n",
      "18      375902    6.414267\n",
      "19      281863    4.809616\n",
      "20      217277    3.707542\n",
      "21      204317    3.486397\n",
      "22      164878    2.813423\n",
      "23      127698    2.178996\n",
      "UU       59409    1.013735\n",
      "        C_YEAR  percentage\n",
      "C_SEV                     \n",
      "1        98633    1.683041\n",
      "2      5761772   98.316959\n",
      "         C_YEAR  percentage\n",
      "C_VEHS                     \n",
      "1        661165   11.281905\n",
      "2       1894124   32.320718\n",
      "3        387281    6.608437\n",
      "4         96639    1.649017\n",
      "5         22860    0.390076\n",
      "6          7888    0.134598\n",
      "7          3123    0.053290\n",
      "8          1570    0.026790\n",
      "9           931    0.015886\n",
      "10          761    0.012985\n",
      "11          466    0.007952\n",
      "12          428    0.007303\n",
      "13          246    0.004198\n",
      "14          261    0.004454\n",
      "15          224    0.003822\n",
      "16          158    0.002696\n",
      "17           94    0.001604\n",
      "18          122    0.002082\n",
      "19           62    0.001058\n",
      "20          219    0.003737\n",
      "21           29    0.000495\n",
      "22           24    0.000410\n",
      "24           24    0.000410\n",
      "25           65    0.001109\n",
      "26           61    0.001041\n",
      "27           38    0.000648\n",
      "28           63    0.001075\n",
      "31           32    0.000546\n",
      "33           39    0.000665\n",
      "35          172    0.002935\n",
      "36          254    0.004334\n",
      "37           41    0.000700\n",
      "38           59    0.001007\n",
      "39           48    0.000819\n",
      "43           44    0.000751\n",
      "44          102    0.001740\n",
      "46           59    0.001007\n",
      "56           58    0.000990\n",
      "57           58    0.000990\n",
      "58           61    0.001041\n",
      "72          123    0.002099\n",
      "77          113    0.001928\n",
      "01       587278   10.021121\n",
      "02      1718316   29.320787\n",
      "03       352189    6.009639\n",
      "04        86397    1.474250\n",
      "05        21217    0.362040\n",
      "06         6501    0.110931\n",
      "07         2558    0.043649\n",
      "08         1100    0.018770\n",
      "09          902    0.015391\n",
      "10          432    0.007372\n",
      "11          395    0.006740\n",
      "12          216    0.003686\n",
      "13          169    0.002884\n",
      "14          286    0.004880\n",
      "15          252    0.004300\n",
      "16          122    0.002082\n",
      "17           79    0.001348\n",
      "18           57    0.000973\n",
      "19           63    0.001075\n",
      "20           46    0.000785\n",
      "21          111    0.001894\n",
      "22          110    0.001877\n",
      "23           24    0.000410\n",
      "24           86    0.001467\n",
      "25            2    0.000034\n",
      "26           55    0.000939\n",
      "27           48    0.000819\n",
      "29           31    0.000529\n",
      "30           34    0.000580\n",
      "32           42    0.000717\n",
      "34           36    0.000614\n",
      "35            3    0.000051\n",
      "38           49    0.000836\n",
      "40           41    0.000700\n",
      "41           51    0.000870\n",
      "51           80    0.001365\n",
      "54           86    0.001467\n",
      "71           92    0.001570\n",
      "77          116    0.001979\n",
      "UU          541    0.009231\n",
      "         C_YEAR  percentage\n",
      "C_CONF                     \n",
      "01        92430    1.577195\n",
      "02       186935    3.189797\n",
      "03       165410    2.822501\n",
      "04       214350    3.657597\n",
      "05        13049    0.222664\n",
      "06       515468    8.795774\n",
      "21      1771212   30.223372\n",
      "22       197006    3.361645\n",
      "23        70088    1.195958\n",
      "24        52067    0.888454\n",
      "25        10922    0.186369\n",
      "31       195284    3.332261\n",
      "32        47307    0.807231\n",
      "33       422241    7.204980\n",
      "34        62181    1.061036\n",
      "35       868197   14.814625\n",
      "36       431298    7.359525\n",
      "41        80961    1.381492\n",
      "QQ       284980    4.862804\n",
      "UU       179019    3.054721\n",
      "         C_YEAR  percentage\n",
      "C_RCFG                     \n",
      "01      2079515   35.484152\n",
      "02      2746752   46.869662\n",
      "03       289184    4.934540\n",
      "04        23723    0.404801\n",
      "05        51196    0.873592\n",
      "06         6001    0.102399\n",
      "07         1009    0.017217\n",
      "08        11780    0.201010\n",
      "09         1743    0.029742\n",
      "10          556    0.009487\n",
      "QQ       144298    2.462253\n",
      "UU       504648    8.611145\n",
      "         C_YEAR  percentage\n",
      "C_WTHR                     \n",
      "1       4074538   69.526560\n",
      "2        600226   10.242057\n",
      "3        600105   10.239992\n",
      "4        354615    6.051032\n",
      "5         30330    0.517541\n",
      "6         82439    1.406712\n",
      "7         15164    0.258753\n",
      "Q         15013    0.256177\n",
      "U         87975    1.501176\n",
      "         C_YEAR  percentage\n",
      "C_RSUR                     \n",
      "1       3846162   65.629628\n",
      "2       1080964   18.445210\n",
      "3        259234    4.423483\n",
      "4         72041    1.229284\n",
      "5        320445    5.467967\n",
      "6         25355    0.432649\n",
      "7          6018    0.102689\n",
      "8          1226    0.020920\n",
      "9           292    0.004983\n",
      "Q        170217    2.904526\n",
      "U         78451    1.338662\n",
      "         C_YEAR  percentage\n",
      "C_RALN                     \n",
      "1       4162359   71.025108\n",
      "2        584025    9.965608\n",
      "3        360870    6.157766\n",
      "4        224222    3.826050\n",
      "5         37991    0.648266\n",
      "6         27626    0.471401\n",
      "Q         28602    0.488055\n",
      "U        434710    7.417747\n",
      "         C_YEAR  percentage\n",
      "C_TRAF                     \n",
      "01      1628309   27.784923\n",
      "02        19114    0.326155\n",
      "03       650008   11.091520\n",
      "04        89688    1.530406\n",
      "05         4199    0.071650\n",
      "06        45600    0.778103\n",
      "07         2419    0.041277\n",
      "08        24479    0.417702\n",
      "09          550    0.009385\n",
      "10         2924    0.049894\n",
      "11         3421    0.058375\n",
      "12         3209    0.054757\n",
      "13         4298    0.073340\n",
      "15         3852    0.065729\n",
      "16          817    0.013941\n",
      "17         3969    0.067726\n",
      "18      3068048   52.352150\n",
      "QQ        82018    1.399528\n",
      "UU       223483    3.813440\n",
      "       C_YEAR  percentage\n",
      "V_ID                     \n",
      "1     1109276   18.928316\n",
      "2      764061   13.037683\n",
      "3      106251    1.813032\n",
      "4       20933    0.357194\n",
      "5        4676    0.079790\n",
      "6        1605    0.027387\n",
      "7         677    0.011552\n",
      "8         387    0.006604\n",
      "9         274    0.004675\n",
      "10        167    0.002850\n",
      "11        147    0.002508\n",
      "12        111    0.001894\n",
      "13         98    0.001672\n",
      "14         74    0.001263\n",
      "15         59    0.001007\n",
      "16         48    0.000819\n",
      "17         42    0.000717\n",
      "18         36    0.000614\n",
      "19         44    0.000751\n",
      "20         28    0.000478\n",
      "21         25    0.000427\n",
      "22         25    0.000427\n",
      "23         25    0.000427\n",
      "24         20    0.000341\n",
      "25         20    0.000341\n",
      "26         21    0.000358\n",
      "27         17    0.000290\n",
      "28         21    0.000358\n",
      "29         16    0.000273\n",
      "30         20    0.000341\n",
      "31         18    0.000307\n",
      "32         18    0.000307\n",
      "33         17    0.000290\n",
      "34         14    0.000239\n",
      "35         16    0.000273\n",
      "36         15    0.000256\n",
      "37         12    0.000205\n",
      "38          8    0.000137\n",
      "39          7    0.000119\n",
      "40          6    0.000102\n",
      "41          7    0.000119\n",
      "42          4    0.000068\n",
      "43          6    0.000102\n",
      "44          5    0.000085\n",
      "45          3    0.000051\n",
      "46          3    0.000051\n",
      "47          2    0.000034\n",
      "48          2    0.000034\n",
      "49          2    0.000034\n",
      "50          1    0.000017\n",
      "51          3    0.000051\n",
      "52          5    0.000085\n",
      "53          1    0.000017\n",
      "54          1    0.000017\n",
      "55          1    0.000017\n",
      "56          1    0.000017\n",
      "57          1    0.000017\n",
      "99      82702    1.411199\n",
      "01    2000007   34.127454\n",
      "02    1386353   23.656266\n",
      "03     192272    3.280865\n",
      "04      37585    0.641338\n",
      "05       8114    0.138455\n",
      "06       2567    0.043802\n",
      "07       1173    0.020016\n",
      "08        626    0.010682\n",
      "09        452    0.007713\n",
      "10        270    0.004607\n",
      "11        216    0.003686\n",
      "12        161    0.002747\n",
      "13        138    0.002355\n",
      "14        109    0.001860\n",
      "15         93    0.001587\n",
      "16         71    0.001212\n",
      "17         71    0.001212\n",
      "18         66    0.001126\n",
      "19         56    0.000956\n",
      "20         55    0.000939\n",
      "21         41    0.000700\n",
      "22         42    0.000717\n",
      "23         39    0.000665\n",
      "24         38    0.000648\n",
      "25         33    0.000563\n",
      "26         33    0.000563\n",
      "27         31    0.000529\n",
      "28         27    0.000461\n",
      "29         23    0.000392\n",
      "30         22    0.000375\n",
      "31         26    0.000444\n",
      "32         29    0.000495\n",
      "33         19    0.000324\n",
      "34         20    0.000341\n",
      "35         23    0.000392\n",
      "36         17    0.000290\n",
      "37         12    0.000205\n",
      "38         13    0.000222\n",
      "39         11    0.000188\n",
      "40         13    0.000222\n",
      "41         11    0.000188\n",
      "42         13    0.000222\n",
      "43         10    0.000171\n",
      "44         14    0.000239\n",
      "45         12    0.000205\n",
      "46         13    0.000222\n",
      "47         10    0.000171\n",
      "48         14    0.000239\n",
      "49         10    0.000171\n",
      "50          8    0.000137\n",
      "51          7    0.000119\n",
      "52         10    0.000171\n",
      "53         13    0.000222\n",
      "54         13    0.000222\n",
      "55          7    0.000119\n",
      "56         14    0.000239\n",
      "57          4    0.000068\n",
      "58          4    0.000068\n",
      "59          9    0.000154\n",
      "60          8    0.000137\n",
      "61          5    0.000085\n",
      "62          5    0.000085\n",
      "63          6    0.000102\n",
      "64          6    0.000102\n",
      "65          7    0.000119\n",
      "66          7    0.000119\n",
      "67          4    0.000068\n",
      "68          4    0.000068\n",
      "69          4    0.000068\n",
      "70          4    0.000068\n",
      "71          5    0.000085\n",
      "72          9    0.000154\n",
      "73          3    0.000051\n",
      "74          2    0.000034\n",
      "75          1    0.000017\n",
      "76          3    0.000051\n",
      "77          2    0.000034\n",
      "83          1    0.000017\n",
      "85          1    0.000017\n",
      "86          2    0.000034\n",
      "99     136635    2.331494\n",
      "UU        433    0.007389\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         C_YEAR  percentage\n",
      "V_TYPE                     \n",
      "01      4827390   82.372976\n",
      "05        66106    1.128011\n",
      "06       175491    2.994520\n",
      "07        88057    1.502575\n",
      "08        70556    1.203944\n",
      "09        20914    0.356870\n",
      "10          906    0.015460\n",
      "11        51260    0.874684\n",
      "14       122734    2.094292\n",
      "16         9722    0.165893\n",
      "17       122907    2.097244\n",
      "18         3132    0.053443\n",
      "19         2001    0.034144\n",
      "20         7635    0.130281\n",
      "21          825    0.014078\n",
      "22         4583    0.078203\n",
      "23         3075    0.052471\n",
      "NN       227913    3.889032\n",
      "QQ        25444    0.434168\n",
      "UU        29754    0.507712\n",
      "        C_YEAR  percentage\n",
      "V_YEAR                    \n",
      "1901        14    0.000239\n",
      "1903         8    0.000137\n",
      "1904         2    0.000034\n",
      "1905         3    0.000051\n",
      "1906         1    0.000017\n",
      "1907         2    0.000034\n",
      "1908         5    0.000085\n",
      "1909         2    0.000034\n",
      "1910         1    0.000017\n",
      "1911         9    0.000154\n",
      "1912         8    0.000137\n",
      "1913         4    0.000068\n",
      "1914        14    0.000239\n",
      "1915        28    0.000478\n",
      "1916         7    0.000119\n",
      "1917         6    0.000102\n",
      "1918         9    0.000154\n",
      "1919        17    0.000290\n",
      "1920        31    0.000529\n",
      "1921         7    0.000119\n",
      "1922        16    0.000273\n",
      "1923        14    0.000239\n",
      "1924         5    0.000085\n",
      "1925        12    0.000205\n",
      "1926        20    0.000341\n",
      "1927         7    0.000119\n",
      "1928        22    0.000375\n",
      "1929        15    0.000256\n",
      "1930        38    0.000648\n",
      "1931        24    0.000410\n",
      "1932        11    0.000188\n",
      "1933        11    0.000188\n",
      "1934        10    0.000171\n",
      "1935        15    0.000256\n",
      "1936         3    0.000051\n",
      "1937        18    0.000307\n",
      "1938        36    0.000614\n",
      "1939        86    0.001467\n",
      "1940        24    0.000410\n",
      "1941        13    0.000222\n",
      "1942        11    0.000188\n",
      "1943         4    0.000068\n",
      "1944        14    0.000239\n",
      "1945        21    0.000358\n",
      "1946        27    0.000461\n",
      "1947        44    0.000751\n",
      "1948        34    0.000580\n",
      "1949        38    0.000648\n",
      "1950        50    0.000853\n",
      "1951        38    0.000648\n",
      "1952        52    0.000887\n",
      "1953        36    0.000614\n",
      "1954        38    0.000648\n",
      "1955        72    0.001229\n",
      "1956        94    0.001604\n",
      "1957        96    0.001638\n",
      "1958        76    0.001297\n",
      "1959        95    0.001621\n",
      "1960       122    0.002082\n",
      "1961        74    0.001263\n",
      "1962       168    0.002867\n",
      "1963       177    0.003020\n",
      "1964       258    0.004402\n",
      "1965       415    0.007081\n",
      "1966       505    0.008617\n",
      "1967       678    0.011569\n",
      "1968       743    0.012678\n",
      "1969       920    0.015699\n",
      "1970       973    0.016603\n",
      "1971       855    0.014589\n",
      "1972      1409    0.024043\n",
      "1973      1491    0.025442\n",
      "1974      1641    0.028001\n",
      "1975      2210    0.037711\n",
      "1976      2872    0.049007\n",
      "1977      4567    0.077930\n",
      "1978      5990    0.102211\n",
      "1979      8611    0.146935\n",
      "1980     11839    0.202017\n",
      "1981     17290    0.295031\n",
      "1982     13869    0.236656\n",
      "1983     19099    0.325899\n",
      "1984     32451    0.553733\n",
      "1985     46251    0.789212\n",
      "1986     69722    1.189713\n",
      "1987     82980    1.415943\n",
      "1988    121781    2.078030\n",
      "1989    139738    2.384443\n",
      "1990    159421    2.720307\n",
      "1991    169021    2.884118\n",
      "1992    192313    3.281565\n",
      "1993    186598    3.184046\n",
      "1994    194099    3.312041\n",
      "1995    225404    3.846219\n",
      "1996    198814    3.392496\n",
      "1997    262438    4.478155\n",
      "1998    295311    5.039089\n",
      "1999    287640    4.908193\n",
      "2000    323183    5.514687\n",
      "2001    278900    4.759057\n",
      "2002    293534    5.008766\n",
      "2003    279496    4.769227\n",
      "2004    225647    3.850365\n",
      "2005    227478    3.881609\n",
      "2006    191089    3.260679\n",
      "2007    184021    3.140073\n",
      "2008    147655    2.519536\n",
      "2009    105236    1.795712\n",
      "2010     91852    1.567332\n",
      "2011     64215    1.095743\n",
      "2012     50899    0.868524\n",
      "2013     35051    0.598099\n",
      "2014     14366    0.245137\n",
      "2015      1229    0.020971\n",
      "NNNN    260256    4.440922\n",
      "UUUU    324122    5.530710\n",
      "       C_YEAR  percentage\n",
      "P_ID                     \n",
      "01    4170908   71.170986\n",
      "02    1133519   19.341991\n",
      "03     341408    5.825672\n",
      "04     131881    2.250373\n",
      "05      41503    0.708193\n",
      "06      11863    0.202426\n",
      "07       4860    0.082929\n",
      "08       2260    0.038564\n",
      "09       1433    0.024452\n",
      "10       1115    0.019026\n",
      "11        906    0.015460\n",
      "12        773    0.013190\n",
      "13        652    0.011126\n",
      "14        558    0.009522\n",
      "15        495    0.008447\n",
      "16        431    0.007354\n",
      "17        383    0.006535\n",
      "18        366    0.006245\n",
      "19        336    0.005733\n",
      "20        312    0.005324\n",
      "21        283    0.004829\n",
      "22        260    0.004437\n",
      "23        245    0.004181\n",
      "24        218    0.003720\n",
      "25        208    0.003549\n",
      "26        184    0.003140\n",
      "27        171    0.002918\n",
      "28        163    0.002781\n",
      "29        154    0.002628\n",
      "30        146    0.002491\n",
      "31        133    0.002269\n",
      "32        122    0.002082\n",
      "33        115    0.001962\n",
      "34        104    0.001775\n",
      "35         93    0.001587\n",
      "36         84    0.001433\n",
      "37         73    0.001246\n",
      "38         63    0.001075\n",
      "39         61    0.001041\n",
      "40         58    0.000990\n",
      "41         51    0.000870\n",
      "42         45    0.000768\n",
      "43         42    0.000717\n",
      "44         34    0.000580\n",
      "45         32    0.000546\n",
      "46         27    0.000461\n",
      "47         25    0.000427\n",
      "48         24    0.000410\n",
      "49         22    0.000375\n",
      "50         21    0.000358\n",
      "51         19    0.000324\n",
      "52         17    0.000290\n",
      "53         15    0.000256\n",
      "54         14    0.000239\n",
      "55         10    0.000171\n",
      "56          7    0.000119\n",
      "57          6    0.000102\n",
      "58          6    0.000102\n",
      "59          6    0.000102\n",
      "60          5    0.000085\n",
      "61          4    0.000068\n",
      "62          4    0.000068\n",
      "63          4    0.000068\n",
      "64          4    0.000068\n",
      "65          3    0.000051\n",
      "66          3    0.000051\n",
      "67          3    0.000051\n",
      "68          3    0.000051\n",
      "69          3    0.000051\n",
      "70          3    0.000051\n",
      "71          3    0.000051\n",
      "72          3    0.000051\n",
      "73          2    0.000034\n",
      "74          2    0.000034\n",
      "75          2    0.000034\n",
      "76          2    0.000034\n",
      "77          2    0.000034\n",
      "78          2    0.000034\n",
      "79          2    0.000034\n",
      "80          2    0.000034\n",
      "81          2    0.000034\n",
      "82          2    0.000034\n",
      "83          2    0.000034\n",
      "84          2    0.000034\n",
      "85          2    0.000034\n",
      "86          2    0.000034\n",
      "87          2    0.000034\n",
      "88          2    0.000034\n",
      "89          2    0.000034\n",
      "90          2    0.000034\n",
      "91          2    0.000034\n",
      "92          2    0.000034\n",
      "93          2    0.000034\n",
      "94          1    0.000017\n",
      "95          1    0.000017\n",
      "99          1    0.000017\n",
      "NN      10976    0.187291\n",
      "UU         16    0.000273\n",
      "        C_YEAR  percentage\n",
      "P_SEX                     \n",
      "F      2440421   41.642532\n",
      "M      3170244   54.095988\n",
      "N        14786    0.252303\n",
      "U       234954    4.009177\n",
      "       C_YEAR  percentage\n",
      "P_AGE                    \n",
      "01      39423    0.672701\n",
      "02      25371    0.432922\n",
      "03      25532    0.435670\n",
      "04      26407    0.450600\n",
      "05      26642    0.454610\n",
      "06      26002    0.443689\n",
      "07      26698    0.455566\n",
      "08      27120    0.462767\n",
      "09      27424    0.467954\n",
      "10      28697    0.489676\n",
      "11      28195    0.481110\n",
      "12      30392    0.518599\n",
      "13      32123    0.548136\n",
      "14      41043    0.700344\n",
      "15      52704    0.899324\n",
      "16      96467    1.646081\n",
      "17     158163    2.698841\n",
      "18     171719    2.930156\n",
      "19     167721    2.861935\n",
      "20     158747    2.708806\n",
      "21     147725    2.520730\n",
      "22     138421    2.361970\n",
      "23     130566    2.227935\n",
      "24     122300    2.086886\n",
      "25     118292    2.018495\n",
      "26     110289    1.881935\n",
      "27     105778    1.804961\n",
      "28     102137    1.742832\n",
      "29      98413    1.679287\n",
      "30      99223    1.693108\n",
      "31      94044    1.604736\n",
      "32      93307    1.592160\n",
      "33      92568    1.579550\n",
      "34      92167    1.572707\n",
      "35      94472    1.612039\n",
      "36      92899    1.585198\n",
      "37      93354    1.592962\n",
      "38      94091    1.605538\n",
      "39      94326    1.609547\n",
      "40      97677    1.666728\n",
      "41      94266    1.608524\n",
      "42      95294    1.626065\n",
      "43      93962    1.603336\n",
      "44      92742    1.582519\n",
      "45      92873    1.584754\n",
      "46      89262    1.523137\n",
      "47      86978    1.484164\n",
      "48      85490    1.458773\n",
      "49      83287    1.421182\n",
      "50      81968    1.398675\n",
      "51      77422    1.321103\n",
      "52      75046    1.280560\n",
      "53      72062    1.229642\n",
      "54      68252    1.164629\n",
      "55      64957    1.108405\n",
      "56      60806    1.037573\n",
      "57      57115    0.974591\n",
      "58      54166    0.924271\n",
      "59      50805    0.866920\n",
      "60      48971    0.835625\n",
      "61      43770    0.746877\n",
      "62      41411    0.706624\n",
      "63      39182    0.668589\n",
      "64      36664    0.625622\n",
      "65      35207    0.600761\n",
      "66      31622    0.539587\n",
      "67      29846    0.509282\n",
      "68      28019    0.478107\n",
      "69      26383    0.450191\n",
      "70      26371    0.449986\n",
      "71      24125    0.411661\n",
      "72      23618    0.403010\n",
      "73      22058    0.376390\n",
      "74      21463    0.366237\n",
      "75      20598    0.351477\n",
      "76      19456    0.331991\n",
      "77      18121    0.309211\n",
      "78      17096    0.291720\n",
      "79      16107    0.274844\n",
      "80      15184    0.259095\n",
      "81      12607    0.215122\n",
      "82      11600    0.197939\n",
      "83      10214    0.174288\n",
      "84       8496    0.144973\n",
      "85       7406    0.126374\n",
      "86       6064    0.103474\n",
      "87       4796    0.081837\n",
      "88       3676    0.062726\n",
      "89       2822    0.048154\n",
      "90       2192    0.037404\n",
      "91       1429    0.024384\n",
      "92       1025    0.017490\n",
      "93        688    0.011740\n",
      "94        453    0.007730\n",
      "95        292    0.004983\n",
      "96        201    0.003430\n",
      "97        110    0.001877\n",
      "98        193    0.003293\n",
      "99        321    0.005477\n",
      "NN      18016    0.307419\n",
      "UU     377140    6.435391\n",
      "        C_YEAR  percentage\n",
      "P_PSN                     \n",
      "11     3926086   66.993425\n",
      "12       87671    1.495989\n",
      "13      884534   15.093394\n",
      "21      215997    3.685701\n",
      "22       90317    1.541139\n",
      "23      258122    4.404508\n",
      "31        4566    0.077913\n",
      "32       30092    0.513480\n",
      "33        5756    0.098218\n",
      "96       43850    0.748242\n",
      "97         191    0.003259\n",
      "98        6658    0.113610\n",
      "99      208888    3.564395\n",
      "NN       14153    0.241502\n",
      "QQ       25862    0.441301\n",
      "UU       57662    0.983925\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         C_YEAR  percentage\n",
      "P_ISEV                     \n",
      "1       2375208   40.529759\n",
      "2       3073431   52.444003\n",
      "3         40354    0.688587\n",
      "N        290711    4.960596\n",
      "U         80701    1.377055\n",
      "         C_YEAR  percentage\n",
      "P_SAFE                     \n",
      "01       198606    3.388947\n",
      "02      4163903   71.051455\n",
      "09        96437    1.645569\n",
      "10          112    0.001911\n",
      "11           11    0.000188\n",
      "12        18322    0.312641\n",
      "13       148730    2.537879\n",
      "NN       571946    9.759496\n",
      "QQ        47150    0.804552\n",
      "UU       615188   10.497363\n",
      "         C_YEAR  percentage\n",
      "P_USER                     \n",
      "1       3658827   62.433006\n",
      "2       1561014   26.636623\n",
      "3        219337    3.742694\n",
      "4        122907    2.097244\n",
      "5        122734    2.094292\n",
      "U        175586    2.996141\n"
     ]
    }
   ],
   "source": [
    "#Vemos el porcentage de cada valor de cada variable para ver sus distribuciones\n",
    "\n",
    "col_names= dataframe.columns \n",
    "distribucionvariables={}\n",
    "for i in range(len(col_names)):\n",
    "    aux = dataframe.groupby(col_names[i])[[\"C_YEAR\"]].count()\n",
    "    aux ['percentage'] = 100* (aux['C_YEAR']/aux['C_YEAR'].sum())\n",
    "    distribucionvariables[col_names[i]]= aux\n",
    "    print(distribucionvariables[col_names[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7DSPYpXsq-Lt",
    "outputId": "02e52ac9-6549-460a-d1d5-0cc881b6afb6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, '01', '02', '11', '12', 'UU'], dtype='object', name='C_MNTH')\n"
     ]
    }
   ],
   "source": [
    "print(distribucionvariables['C_MNTH'].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "svDXZj1Oq-Oa",
    "outputId": "e49379fb-1643-4593-cb87-909bc4e404de"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1     752297\n",
      "8     547045\n",
      "7     537693\n",
      "6     520010\n",
      "10    515911\n",
      "9     512790\n",
      "11    496954\n",
      "5     468235\n",
      "2     423287\n",
      "3     417814\n",
      "4     392533\n",
      "12    275451\n",
      "UU       385\n",
      "Name: C_MNTH, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Eliminamos el 01 02 11 12\n",
    "dataframe['C_MNTH'] = np.where(dataframe['C_MNTH'] == \"01\", 1, dataframe['C_MNTH'])\n",
    "dataframe['C_MNTH'] = np.where(dataframe['C_MNTH'] == \"02\", 2, dataframe['C_MNTH'])\n",
    "dataframe['C_MNTH'] = np.where(dataframe['C_MNTH'] == \"11\", 1, dataframe['C_MNTH'])\n",
    "dataframe['C_MNTH'] = np.where(dataframe['C_MNTH'] == \"12\", 1, dataframe['C_MNTH'])\n",
    "\n",
    "print(dataframe.C_MNTH.value_counts())\n",
    "meses=['C_MNTH']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GdyQUQcHyB82",
    "outputId": "6e93161f-6511-4f2c-88c9-801093265e22"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index([1, 2, 3, 4, 5, 6, 7, '1', '2', '3', '4', '5', '6', '7', 'U'], dtype='object', name='C_WDAY')\n"
     ]
    }
   ],
   "source": [
    "print(distribucionvariables['C_WDAY'].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5yw8c8Cfxx9h",
    "outputId": "59b4c16d-bbdd-4262-bff8-aabd056fa844"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5    999725\n",
      "4    869653\n",
      "6    867188\n",
      "3    825560\n",
      "2    816265\n",
      "1    776012\n",
      "7    704679\n",
      "U      1323\n",
      "Name: C_WDAY, dtype: int64\n",
      "        C_YEAR  percentage\n",
      "C_MNTH                    \n",
      "1       752297   12.836946\n",
      "2       423287    7.222828\n",
      "3       417814    7.129439\n",
      "4       392533    6.698052\n",
      "5       468235    7.989806\n",
      "6       520010    8.873278\n",
      "7       537693    9.175014\n",
      "8       547045    9.334594\n",
      "9       512790    8.750078\n",
      "10      515911    8.803334\n",
      "11      496954    8.479858\n",
      "12      275451    4.700204\n",
      "UU         385    0.006570\n",
      "        C_YEAR  percentage\n",
      "C_WDAY                    \n",
      "1       776012   13.241610\n",
      "2       816265   13.928474\n",
      "3       825560   14.087081\n",
      "4       869653   14.839469\n",
      "5       999725   17.058975\n",
      "6       867188   14.797407\n",
      "7       704679   12.024408\n",
      "U         1323    0.022575\n"
     ]
    }
   ],
   "source": [
    "#Hacemos lo mismo con los dias de la semana\n",
    "\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '1', 1, dataframe['C_WDAY'])\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '2', 2, dataframe['C_WDAY'])\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '3', 3, dataframe['C_WDAY'])\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '4', 4, dataframe['C_WDAY'])\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '5', 5, dataframe['C_WDAY'])\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '6', 6, dataframe['C_WDAY'])\n",
    "dataframe['C_WDAY'] = np.where(dataframe['C_WDAY'] == '7', 7, dataframe['C_WDAY'])\n",
    "print(dataframe.C_WDAY.value_counts())\n",
    "meses.append('C_WDAY')\n",
    "\n",
    "for i in range(len(meses)):\n",
    "    aux = dataframe.groupby(meses[i])[[\"C_YEAR\"]].count()\n",
    "    aux ['percentage'] = 100* (aux['C_YEAR']/aux['C_YEAR'].sum())\n",
    "    distribucionvariables[meses[i]]= aux\n",
    "    print(distribucionvariables[meses[i]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0eH6Z4Mey_Uy"
   },
   "source": [
    "2- ¿Qué tipos de vehículos (modelos, antigüedad, etc.) y conductores son más propensos a tener accidentes (acción correctiva en prima)?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "U_0YFNdXWUi2"
   },
   "source": [
    "3-¿Qué tipos de vehículos (modelos, antigüedad, etc.) y conductores son menos propensos a tener accidentes (descuento en prima)?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 432
    },
    "id": "Hb-Pe9v70Omf",
    "outputId": "7b32e340-c3e7-412a-9e48-11c6fffe9a8f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribución variable edad')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1920x640 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Vemos las distribuciones de las variables que sean determinantes en cuanto al conductor y las visualizamos\n",
    "\n",
    "#Edad\n",
    "\n",
    "figure(figsize=(24,8 ), dpi=80)\n",
    "plt.bar(distribucionvariables['P_AGE'].index[0:70],distribucionvariables['P_AGE']['C_YEAR'][0:70] , color='b')\n",
    "plt.title(\"Distribución variable edad\")\n",
    "\n",
    "#Se puede observar en el gráfico siguiente que las edades que más se ven envueltas en accidentes son los 18 años, en la que por lo general aumenta\n",
    "#hasta llegar a esta edad, y disminuye pasada esta edad."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 436
    },
    "id": "B78hq4lAxyBX",
    "outputId": "2b1c31b8-a9ee-47d2-f4fe-e7232fc681ef"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribución variable genero')"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 600x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Género\n",
    "\n",
    "from matplotlib.pyplot import figure\n",
    "figure(figsize=(10,8 ), dpi=60)\n",
    "plt.bar(distribucionvariables['P_SEX'].index,distribucionvariables['P_SEX']['percentage'] , color='b')\n",
    "plt.title(\"Distribución variable genero\")\n",
    "\n",
    "#Se puede observar que la mayoría de conductores son hombres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 436
    },
    "id": "dd32qBBd1iz1",
    "outputId": "6440c8e3-5e65-462f-e715-350eb2a90421"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribución variable edad vehículo')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1200x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Año modelo del vehículo\n",
    "\n",
    "figure(figsize=(20,8 ), dpi=60)\n",
    "plt.bar(distribucionvariables['V_YEAR'].index[80:],distribucionvariables['V_YEAR']['C_YEAR'][80:] , color='b')\n",
    "plt.title(\"Distribución variable edad vehículo\")\n",
    "\n",
    "#En el gráfico se puede ver que los vehículos más accidentados son modelos entre los años 1998 y 2000 y próximos. Aun que también\n",
    "#hay bastantes desconocidos o que no proveen esa información."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 292
    },
    "id": "udce7dAn2ml8",
    "outputId": "89ebd397-df39-4fe8-f65f-f9d7dad78233"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribución variable tipo de usuario')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1400x280 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Usuario accidentado\n",
    "\n",
    "figure(figsize=(20,4 ), dpi=70)\n",
    "label= ['Conductor', 'Pasajero ', 'Peatón', 'Ciclista', 'Motociclista', 'Desconocido']\n",
    "plt.bar(label,distribucionvariables['P_USER']['percentage'] , color='b')\n",
    "plt.title(\"Distribución variable tipo de usuario\")\n",
    "\n",
    "#Se ve claramente que el tipo de usuario es en mayoría el conductor, y pasajero la mitad. En mucha menor medida se encuentran los \n",
    "#peatones, cicistas y motociclistas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 549
    },
    "id": "gmbaCvDr1i2s",
    "outputId": "94ad3b31-b095-485f-b933-6438281d6bda"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Tipo de vehículo')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x640 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Vehículo\n",
    "\n",
    "from matplotlib.pyplot import figure\n",
    "\n",
    "figure(figsize=(10,8 ), dpi=80)\n",
    "\n",
    "plt.pie(distribucionvariables['V_TYPE']['C_YEAR'], autopct='%1.1f%%')\n",
    "plt.legend( distribucionvariables['V_TYPE'].index, loc=\"best\")\n",
    "plt.title(\"Tipo de vehículo\")\n",
    "\n",
    "#Se puede observar que el 82,5% de los vehículos son Vehículo ligero (coche de pasajeros, furgoneta de pasajeros, vehículos utilitarios ligeros y \n",
    "#camionetas ligeras). \n",
    "#Los mayores del resto son Buses urbanos e Intercity, y vehículos agrícolas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 553
    },
    "id": "WxM_ErnA1i66",
    "outputId": "4ed210bd-5bdb-4acf-dabb-b691f56588aa"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11: Conductor\n",
      "12: Delante centro\n",
      "13: Copiloto\n",
      "21: Atrás izquierda \n",
      "22: Atrás centro \n",
      "23: Atrás derecha \n",
      "31: Tercera fila izquierda \n",
      "32: Tercera fila centro \n",
      "33: Tercera fila derecha \n",
      "96: Ocupante desconocido\n",
      "97: Sentado encima de alguien\n",
      "98: Pasajero fuera del coche\n",
      "99: Peatón\n",
      "NN: NN\n",
      "QQ: QQ\n",
      "UU: UU\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1120x280 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Asiento en el coche\n",
    "\n",
    "figure(figsize=(16,4 ), dpi=70)\n",
    "labels= ['Conductor', 'Delante centro', 'Copiloto', 'Atrás izquierda ', 'Atrás centro ', 'Atrás derecha ', 'Tercera fila izquierda ', 'Tercera fila centro ', 'Tercera fila derecha ', 'Ocupante desconocido', 'Sentado encima de alguien', 'Pasajero fuera del coche', 'Peatón', 'NN', 'QQ', 'UU']\n",
    "plt.bar(distribucionvariables['P_PSN'].index,distribucionvariables['P_PSN']['C_YEAR'] , color='b')\n",
    "plt.title(\"Asiento del pasajero en el vehículo\")\n",
    "for i in range(len(labels)): \n",
    "    print(distribucionvariables['P_PSN'].index[i]+ \": \"+ labels[i])\n",
    "\n",
    "#Se puede ver como la mayoría son el conductor, como se podía esperar, y seguido por el copiloto aun que de manera alejada."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "78CsYqn8CSg7"
   },
   "source": [
    "##### 2 - Qué tipos de vehículos (modelos, antigüedad, etc.) y conductores son más propensos a tener accidentes (acción correctiva en prima)?\n",
    "\n",
    "- Los *vehículos* más propensos a tener accidentes son los vehículos ligeros, como puede ser un turismo normal y corriente, que a pesar de tener una mayor participación, se superan en esta medida. En cuanto a la antigüedad se puede observar que los vehículos cuyo modelo tiene lugar entre los años 1995 y 2002 son los que más accidentes sufren. Esto podría explicarse debido a su mayor probabilidad de sufrir accidentes por el simple hecho de tener mayor tiempo de vida y haber sido más usados que los mas recientes, o que los antigüos que dejan de ser utilizados.\n",
    "\n",
    "- En cuanto a los *conductores* más propensos a tener accidentes son las personas con 18 años, que se podría explicar debido a que es el año oficial para poder empezar a conducir, y esto explica claramente que los novatos tengan más accidentes que los conductores exerimentados, lo que se puede ver que cada año que pasa los accidentes por lo general se mantienen o se reducen. Los hombres suuperan ligeramente a las mujeres.\n",
    "\n",
    "- **Por lo que habría que llevar a cabo acciones correctivas en las primas de los asegurados que tengan edades cercanas a los 18, con vehículos ligeros (turismos) fabricados entre los años 1995 y 2002.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oqwl34nLEUqm"
   },
   "source": [
    "#### 3 - ¿Qué tipos de vehículos (modelos, antigüedad, etc.) y conductores son menos propensos a tener accidentes (descuento en prima)? \n",
    "\n",
    "- En cuanto a los *conductores* menos propensos a tener accidentes serían las mujere ligeramente por debajo de los hombres, y en cuanto a la edad sería entorno a los 30 años en adelante. Cada año que pase el conductor tendrá más experiencia y puede que conduzca menos, por lo que cuanto más mayor por lo general menos accidentes.\n",
    "- En cuanto a los *vehículos* menos propensos serían aquellos fabricados mas cercanos a los años 1982 y lo más nuevos. (2014 y más cercanos).\n",
    "- **Por lo que por ejemplo habría que hacer descuento en las primas a las mujeres que tengan una alta edad y conduzcan vehículos nuevos o muy antigüos.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lNdNV_jQy_6t"
   },
   "source": [
    "**4-¿Qué es lo que más contribuye a que existan fallecimientos en un accidente?**\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "id": "NqO86_N0xyEL"
   },
   "outputs": [],
   "source": [
    "#Train y test de la variable C_SEV, en la que 1 significa al menos un fallecido en el accidente y 2 ninguna.\n",
    "data2, test_df = train_test_split (dataframe, test_size= 0.9, random_state=100,stratify=dataframe['C_SEV'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "id": "XNPRCii6b3Gt"
   },
   "outputs": [],
   "source": [
    "#Convertimos la variable hora en noche (22h-6h), dia(6h-14h) y tarde(14h-22h) con la siguiente función:\n",
    "\n",
    "def c_hour(valor):\n",
    "    if valor=='UU' :\n",
    "        return valor\n",
    "    elif int(valor)>=22 or int(valor)<= 6 :\n",
    "        return 'Noche'\n",
    "    elif int(valor)>6 and int(valor)<= 14 :\n",
    "        return 'Dia'\n",
    "    elif int(valor)>14 and int(valor)< 22 :\n",
    "        return 'Tarde'\n",
    "    \n",
    "data2[\"C_HOUR\"]=data2['C_HOUR'].apply( c_hour )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 52
    },
    "id": "ecyFmHK4dlzR",
    "outputId": "b752b013-5e2a-4997-ee86-0e41bdd8cadb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1280x640 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1280x640 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#calculamos la antiguedad del coche \n",
    "\n",
    "def ant(colision, vehiculo):\n",
    "    if  vehiculo == 'UUUU':\n",
    "        return None\n",
    "    elif vehiculo == 'NNNN':\n",
    "        return None\n",
    "    else: \n",
    "        return (int(colision) - int(vehiculo))\n",
    "dataframe['antiguedad']=dataframe.apply( lambda x: ant(x.C_YEAR, x.V_YEAR), axis=1 )\n",
    "figure(figsize=(16,8 ), dpi=80)\n",
    "\n",
    "antiguedad = dataframe.groupby('antiguedad')[[\"C_YEAR\"]].count()\n",
    "antiguedad ['percentage'] = 100* (aux['C_YEAR']/aux['C_YEAR'].sum())\n",
    "figure(figsize=(16,8 ), dpi=80)\n",
    "indice= antiguedad.index[0:25].values\n",
    "valor= antiguedad['C_YEAR'][0:24].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "id": "spGMYI-XaI5j"
   },
   "outputs": [],
   "source": [
    "#Hacemos lo mismo con vehiculo\n",
    "def ant(colision, vehiculo):\n",
    "    if  vehiculo == 'UUUU':\n",
    "        return None\n",
    "    elif vehiculo == 'NNNN':\n",
    "        return None\n",
    "    else: \n",
    "        return (int(colision) - int(vehiculo))\n",
    "data2['antiguedad']=data2.apply( lambda x: ant(x.C_YEAR, x.V_YEAR), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "id": "-kVXSHGMaI8v"
   },
   "outputs": [],
   "source": [
    "#Quitamos las variables con representación muy baja para no sobrecargar el modelo en V_ID\n",
    "\n",
    "eliminar = []\n",
    "for i in distribucionvariables['V_ID'].index: \n",
    "    if distribucionvariables['V_ID'].loc[i, \"percentage\"]< 0.5:\n",
    "        eliminar.append(i)\n",
    "eliminar.remove('UU')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "id": "VGfzcMZzc2zF"
   },
   "outputs": [],
   "source": [
    "def V_ID(valor):\n",
    "    if  valor in eliminar:\n",
    "        return \"Otro\"\n",
    "    else: \n",
    "        return valor\n",
    "data2['V_ID']=data2.apply(lambda x: V_ID(x.V_ID), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "Vs3CzN1Kc211"
   },
   "outputs": [],
   "source": [
    "#Quitamos las variables con representación muy baja para no sobrecargar el modelo en P_ID\n",
    "\n",
    "\n",
    "eliminar = []\n",
    "for i in distribucionvariables['P_ID'].index: \n",
    "    if distribucionvariables['P_ID'].loc[i, \"percentage\"]< 0.5:\n",
    "        eliminar.append(i)\n",
    "def P_ID(valor):\n",
    "    if  valor in eliminar:\n",
    "        return \"Otro\"\n",
    "    else: \n",
    "        return valor\n",
    "data2['P_ID']=data2.apply(lambda x: P_ID(x.P_ID), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 346
    },
    "id": "Jm1ZP3INrCyy",
    "outputId": "aff4b311-7b20-4a4a-eaa6-cf466da6bb3a"
   },
   "outputs": [],
   "source": [
    "#Convertimos la variable antiguedad creada arriba en rangos con la siguiente función:\n",
    "\n",
    "def antiguedad(valor):\n",
    "    if  valor <3:\n",
    "        return \"Menos de 2\"\n",
    "    elif  (valor >=2) and (valor<=5):\n",
    "        return \"Entre 2 y 5\"\n",
    "    elif  (valor >5) and (valor<=10):\n",
    "        return \"Entre 6 y 10\"\n",
    "    elif  (valor >10) and (valor<=15):\n",
    "        return \"Entre 11 y 15\"\n",
    "    elif  (valor >15) and (valor<=20):\n",
    "        return \"Entre 16 y 20\"\n",
    "    else: \n",
    "        return 'Mas de 20'\n",
    "data2['antiguedad']=data2.apply(lambda x: antiguedad(x.antiguedad), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "id": "7euIyVXFdCay"
   },
   "outputs": [],
   "source": [
    "#Convertimos la variable edad en rangos con la siguiente función:\n",
    "\n",
    "\n",
    "def P_AGE(valor):\n",
    "    if valor =='NN':\n",
    "        return valor\n",
    "    elif valor == \"UU\":\n",
    "        return valor\n",
    "    else:\n",
    "        valor = int(valor)\n",
    "        if valor <=18:\n",
    "            return \"Menos de 18\"\n",
    "        elif  (valor >18) and (valor<=25):\n",
    "            return \"Entre 18 y 25\"\n",
    "        elif  (valor >25) and (valor<=40):\n",
    "            return \"Entre 25 y 40\"\n",
    "        elif  (valor >40) and (valor<=55):\n",
    "            return \"Entre 40 y 55\"\n",
    "        elif  (valor >55) and (valor<=70):\n",
    "            return \"Entre 55 y 70\"\n",
    "        elif valor>70:\n",
    "            return 'Mas de 70'\n",
    "        else: \n",
    "            return valor\n",
    "data2['P_AGE']=data2.apply(lambda x: P_AGE(x.P_AGE), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "yLTSSi1hdCdl"
   },
   "outputs": [],
   "source": [
    "#Quitamos las variables con representación muy baja para no sobrecargar el modelo en C_VEHS\n",
    "\n",
    "\n",
    "eliminar = []\n",
    "for i in distribucionvariables['C_VEHS'].index: \n",
    "    if distribucionvariables['C_VEHS'].loc[i, \"percentage\"]< 0.5:\n",
    "        eliminar.append(i)\n",
    "def C_VEHS(valor):\n",
    "    if  valor in eliminar:\n",
    "        return \"Otro\"\n",
    "    else: \n",
    "        return valor\n",
    "data2['C_VEHS']=data2.apply(lambda x: C_VEHS(x.C_VEHS), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "id": "0QarNa_8sxuo"
   },
   "outputs": [],
   "source": [
    "data2= data2.drop(\"V_YEAR\",axis=1)\n",
    "data2 = data2.drop('C_YEAR', axis=1)\n",
    "data2 = data2.astype({\"C_SEV\": str}, errors='raise') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 426
    },
    "id": "Vnw8yu2FsobY",
    "outputId": "d51e640c-8395-42b1-919a-45d99ccec31c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C_MNTH</th>\n",
       "      <th>C_WDAY</th>\n",
       "      <th>C_HOUR</th>\n",
       "      <th>C_SEV</th>\n",
       "      <th>C_VEHS</th>\n",
       "      <th>C_CONF</th>\n",
       "      <th>C_RCFG</th>\n",
       "      <th>C_WTHR</th>\n",
       "      <th>C_RSUR</th>\n",
       "      <th>C_RALN</th>\n",
       "      <th>C_TRAF</th>\n",
       "      <th>V_ID</th>\n",
       "      <th>V_TYPE</th>\n",
       "      <th>P_ID</th>\n",
       "      <th>P_SEX</th>\n",
       "      <th>P_AGE</th>\n",
       "      <th>P_PSN</th>\n",
       "      <th>P_ISEV</th>\n",
       "      <th>P_SAFE</th>\n",
       "      <th>P_USER</th>\n",
       "      <th>antiguedad</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4185241</th>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>Noche</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>35</td>\n",
       "      <td>02</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>01</td>\n",
       "      <td>2</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>Menos de 18</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>Entre 6 y 10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1814256</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Dia</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>35</td>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>F</td>\n",
       "      <td>Entre 55 y 70</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>UU</td>\n",
       "      <td>1</td>\n",
       "      <td>Menos de 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1861931</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Dia</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>35</td>\n",
       "      <td>02</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>F</td>\n",
       "      <td>Entre 18 y 25</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>Entre 2 y 5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1260921</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Dia</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>01</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>Entre 25 y 40</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>Entre 11 y 15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2312447</th>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>Tarde</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>21</td>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>01</td>\n",
       "      <td>03</td>\n",
       "      <td>01</td>\n",
       "      <td>01</td>\n",
       "      <td>M</td>\n",
       "      <td>Entre 40 y 55</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>Entre 6 y 10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        C_MNTH C_WDAY C_HOUR C_SEV C_VEHS C_CONF C_RCFG C_WTHR C_RSUR C_RALN  \\\n",
       "4185241     10      3  Noche     2      2     35     02      3      2      2   \n",
       "1814256      5      5    Dia     2     02     35     02      1      1      1   \n",
       "1861931      7      1    Dia     2     02     35     02      2      2      2   \n",
       "1260921      1      4    Dia     2      1     02     01      4      3      1   \n",
       "2312447      8      5  Tarde     2      3     21     02      1      1      1   \n",
       "\n",
       "        C_TRAF V_ID V_TYPE P_ID P_SEX          P_AGE P_PSN P_ISEV P_SAFE  \\\n",
       "4185241     01    2     01   01     M    Menos de 18    11      2     02   \n",
       "1814256     18   01     01   01     F  Entre 55 y 70    11      1     UU   \n",
       "1861931     18    1     01   01     F  Entre 18 y 25    11      1     02   \n",
       "1260921     18   01     01   01     M  Entre 25 y 40    11      2     02   \n",
       "2312447     01   03     01   01     M  Entre 40 y 55    11      1     02   \n",
       "\n",
       "        P_USER     antiguedad  \n",
       "4185241      1   Entre 6 y 10  \n",
       "1814256      1     Menos de 2  \n",
       "1861931      1    Entre 2 y 5  \n",
       "1260921      1  Entre 11 y 15  \n",
       "2312447      1   Entre 6 y 10  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dl3hn1SdXFYv"
   },
   "source": [
    "**5-Dado un accidente, ¿se puede generar un modelo que prediga si habrá fallecimientos o no? ¿Si se va a necesitar tratamiento médico o no? Las aseguradoras tienen que inmovilizar capital para pagar estas casuísticas.** \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KxGU1yUIXFlW",
    "outputId": "4d2a5ed8-077f-48d0-8056-8199dd1aa70c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    307377\n",
       "1    237233\n",
       "N     29122\n",
       "U      8222\n",
       "3      4086\n",
       "Name: P_ISEV, dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.P_ISEV.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "id": "zv0YhDKnuShI"
   },
   "outputs": [],
   "source": [
    "#0 si no hay lesión, 2 o 3 si fallece o es herido:\n",
    "\n",
    "def P_ISEV(valor):\n",
    "    if  valor == \"2\" :\n",
    "        return \"1\" \n",
    "    elif valor ==\"3\":\n",
    "        return(\"1\")\n",
    "    elif valor =='1':\n",
    "        return 0\n",
    "    else: \n",
    "        return valor\n",
    "data2['P_ISEV']=data2.apply(lambda x: P_ISEV(x.P_ISEV), axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "id": "B-rRYGryvKry"
   },
   "outputs": [],
   "source": [
    "#Quitamos los desconocidos o los que no tenemos datos\n",
    "\n",
    "data2 = data2.drop(data2[data2.C_SEV == 'U' ].index)\n",
    "data2 = data2.drop(data2[data2.C_SEV == 'X' ].index)\n",
    "data2 = data2.drop(data2[data2.P_ISEV == 'U' ].index)\n",
    "data2 = data2.drop(data2[data2.P_ISEV == 'X' ].index)\n",
    "data2 = data2.drop(data2[data2.P_ISEV == 'N' ].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "id": "HgEJYxoEvSlm"
   },
   "outputs": [],
   "source": [
    "#creamos data y train y test\n",
    "\n",
    "dummies=pd.get_dummies(data2, columns=data2.columns, drop_first=True )\n",
    "train_df, test_df = train_test_split (dummies, test_size= 0.9, random_state=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "id": "qFS2Ayimv-kT"
   },
   "outputs": [],
   "source": [
    "train_df_fallecido=train_df.drop('P_ISEV_1', axis=1)\n",
    "test_df_fallecido=test_df.drop('P_ISEV_1', axis=1)\n",
    "y_train_fallecido=train_df_fallecido['C_SEV_2']\n",
    "x_train_fallecido=train_df_fallecido.drop('C_SEV_2', axis=1)\n",
    "y_test_fallecido=test_df_fallecido['C_SEV_2']\n",
    "x_test_fallecido=test_df_fallecido.drop('C_SEV_2', axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zSdQIj2KwR9q",
    "outputId": "a6cfcdea-8e08-40cc-aa41-3dee69d24f95"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(random_state=100)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Utilizamos regresión logística\n",
    "\n",
    "RegresionLog = LogisticRegression(random_state=100)\n",
    "RegresionLog.fit(x_train_fallecido,y_train_fallecido)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "id": "TZUFW7hGv-oT"
   },
   "outputs": [],
   "source": [
    "from matplotlib import pyplot\n",
    "columnas=list(x_train_fallecido.columns)\n",
    "peso = RegresionLog.coef_[0]\n",
    "peso_data=pd.DataFrame([columnas,peso]).transpose()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "l8yuaQSyv-rZ",
    "outputId": "2d8c167e-e6dd-4f11-d248-82281b03cbcb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>Coeficiente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>C_TRAF_10</td>\n",
       "      <td>1.989765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>C_CONF_21</td>\n",
       "      <td>1.892185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>P_ID_05</td>\n",
       "      <td>1.675825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162</th>\n",
       "      <td>P_SAFE_02</td>\n",
       "      <td>1.577514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>C_CONF_31</td>\n",
       "      <td>1.571592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>V_ID_Otro</td>\n",
       "      <td>1.552217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>C_TRAF_12</td>\n",
       "      <td>1.331272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>V_TYPE_08</td>\n",
       "      <td>1.270244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>P_ID_Otro</td>\n",
       "      <td>1.247632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>P_SAFE_13</td>\n",
       "      <td>1.233890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>P_SEX_U</td>\n",
       "      <td>1.194501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>P_SAFE_NN</td>\n",
       "      <td>1.155719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>C_CONF_41</td>\n",
       "      <td>1.143354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>C_TRAF_02</td>\n",
       "      <td>1.063403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>P_SAFE_UU</td>\n",
       "      <td>1.022424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>P_ID_04</td>\n",
       "      <td>1.020085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>P_AGE_Mas de 70</td>\n",
       "      <td>0.993523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>C_CONF_23</td>\n",
       "      <td>0.968588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>C_RALN_U</td>\n",
       "      <td>0.954069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>V_TYPE_UU</td>\n",
       "      <td>0.951945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>C_TRAF_18</td>\n",
       "      <td>0.915978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>C_RCFG_04</td>\n",
       "      <td>0.908313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>C_RCFG_08</td>\n",
       "      <td>0.906985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>C_RSUR_5</td>\n",
       "      <td>0.897940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>V_TYPE_19</td>\n",
       "      <td>0.892149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>P_ID_03</td>\n",
       "      <td>0.828075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>C_VEHS_Otro</td>\n",
       "      <td>0.819656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>C_CONF_25</td>\n",
       "      <td>0.799383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>C_VEHS_4</td>\n",
       "      <td>0.790679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>P_SAFE_09</td>\n",
       "      <td>0.781285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>C_RCFG_03</td>\n",
       "      <td>0.755242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>C_TRAF_03</td>\n",
       "      <td>0.754961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>C_TRAF_06</td>\n",
       "      <td>0.741402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>P_AGE_UU</td>\n",
       "      <td>0.739677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>C_RCFG_06</td>\n",
       "      <td>0.729117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>V_TYPE_07</td>\n",
       "      <td>0.720941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>C_WTHR_6</td>\n",
       "      <td>0.702461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>P_SAFE_QQ</td>\n",
       "      <td>0.692895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>C_CONF_24</td>\n",
       "      <td>0.689389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>C_TRAF_QQ</td>\n",
       "      <td>0.679093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>V_TYPE_20</td>\n",
       "      <td>0.653345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>P_PSN_23</td>\n",
       "      <td>0.633209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>C_VEHS_04</td>\n",
       "      <td>0.630972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>P_PSN_96</td>\n",
       "      <td>0.610656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>C_TRAF_04</td>\n",
       "      <td>0.580873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>C_RSUR_3</td>\n",
       "      <td>0.573692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>C_RSUR_4</td>\n",
       "      <td>0.566017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>C_RALN_6</td>\n",
       "      <td>0.559282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>V_TYPE_18</td>\n",
       "      <td>0.540693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>C_TRAF_05</td>\n",
       "      <td>0.535278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>V_ID_04</td>\n",
       "      <td>0.507728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>C_VEHS_03</td>\n",
       "      <td>0.506001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>C_TRAF_15</td>\n",
       "      <td>0.499857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>C_RSUR_2</td>\n",
       "      <td>0.494782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>C_TRAF_UU</td>\n",
       "      <td>0.482819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>C_TRAF_16</td>\n",
       "      <td>0.480484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>V_TYPE_17</td>\n",
       "      <td>0.460466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>P_USER_4</td>\n",
       "      <td>0.460466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>V_TYPE_NN</td>\n",
       "      <td>0.459580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>P_ID_02</td>\n",
       "      <td>0.455606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>V_TYPE_16</td>\n",
       "      <td>0.453837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>C_VEHS_3</td>\n",
       "      <td>0.448834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>C_HOUR_Noche</td>\n",
       "      <td>0.446088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>V_ID_3</td>\n",
       "      <td>0.441183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>V_TYPE_22</td>\n",
       "      <td>0.439585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>V_ID_UU</td>\n",
       "      <td>0.439334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>C_RSUR_8</td>\n",
       "      <td>0.434944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>C_RCFG_02</td>\n",
       "      <td>0.432452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>C_WTHR_U</td>\n",
       "      <td>0.432361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>V_TYPE_23</td>\n",
       "      <td>0.430915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>C_CONF_UU</td>\n",
       "      <td>0.428870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>C_MNTH_10</td>\n",
       "      <td>0.412600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>P_SAFE_12</td>\n",
       "      <td>0.411829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>C_CONF_22</td>\n",
       "      <td>0.387389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>P_AGE_NN</td>\n",
       "      <td>0.386467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>C_RALN_4</td>\n",
       "      <td>0.384200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>C_CONF_05</td>\n",
       "      <td>0.369087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>P_SEX_N</td>\n",
       "      <td>0.366501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>C_CONF_QQ</td>\n",
       "      <td>0.363872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>C_CONF_36</td>\n",
       "      <td>0.359781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>P_SEX_M</td>\n",
       "      <td>0.340782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>C_RALN_3</td>\n",
       "      <td>0.338265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>V_ID_03</td>\n",
       "      <td>0.336677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>P_PSN_UU</td>\n",
       "      <td>0.331953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>C_MNTH_12</td>\n",
       "      <td>0.331695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>C_TRAF_11</td>\n",
       "      <td>0.328394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>C_RALN_2</td>\n",
       "      <td>0.311754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>P_USER_U</td>\n",
       "      <td>0.309707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>C_WDAY_3</td>\n",
       "      <td>0.307939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>C_TRAF_17</td>\n",
       "      <td>0.292841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>C_CONF_34</td>\n",
       "      <td>0.275612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>P_PSN_NN</td>\n",
       "      <td>0.263937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C_MNTH_7</td>\n",
       "      <td>0.263084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>P_AGE_Entre 40 y 55</td>\n",
       "      <td>0.263045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>C_RCFG_09</td>\n",
       "      <td>0.262873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>C_MNTH_9</td>\n",
       "      <td>0.255194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>V_ID_02</td>\n",
       "      <td>0.246764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>C_RSUR_7</td>\n",
       "      <td>0.246123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>P_AGE_Entre 55 y 70</td>\n",
       "      <td>0.244798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>P_PSN_22</td>\n",
       "      <td>0.242687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>P_PSN_98</td>\n",
       "      <td>0.234540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>V_ID_2</td>\n",
       "      <td>0.227980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>C_WTHR_2</td>\n",
       "      <td>0.226466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>C_WTHR_5</td>\n",
       "      <td>0.221834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>C_CONF_03</td>\n",
       "      <td>0.218884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C_MNTH_2</td>\n",
       "      <td>0.214952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>C_TRAF_08</td>\n",
       "      <td>0.213926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>C_CONF_06</td>\n",
       "      <td>0.209989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>V_TYPE_06</td>\n",
       "      <td>0.208332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>V_ID_01</td>\n",
       "      <td>0.206594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>P_AGE_Menos de 18</td>\n",
       "      <td>0.202749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>C_WDAY_U</td>\n",
       "      <td>0.202605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>C_WDAY_2</td>\n",
       "      <td>0.201344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>P_PSN_33</td>\n",
       "      <td>0.198333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>C_RSUR_U</td>\n",
       "      <td>0.195745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>C_WTHR_7</td>\n",
       "      <td>0.191844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>C_MNTH_8</td>\n",
       "      <td>0.191050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>C_VEHS_02</td>\n",
       "      <td>0.190713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>C_WTHR_4</td>\n",
       "      <td>0.189015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>C_HOUR_UU</td>\n",
       "      <td>0.184943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>V_ID_99</td>\n",
       "      <td>0.184902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>C_RCFG_QQ</td>\n",
       "      <td>0.178432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>C_CONF_33</td>\n",
       "      <td>0.177184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>P_PSN_21</td>\n",
       "      <td>0.174892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C_MNTH_6</td>\n",
       "      <td>0.174598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>C_WTHR_3</td>\n",
       "      <td>0.161739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>C_WDAY_7</td>\n",
       "      <td>0.160756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>P_PSN_12</td>\n",
       "      <td>0.158118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>antiguedad_Mas de 20</td>\n",
       "      <td>0.155172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>C_RCFG_05</td>\n",
       "      <td>0.154605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>C_CONF_02</td>\n",
       "      <td>0.154591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>P_PSN_32</td>\n",
       "      <td>0.152184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>C_VEHS_01</td>\n",
       "      <td>0.132121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>C_CONF_35</td>\n",
       "      <td>0.130409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>C_RCFG_UU</td>\n",
       "      <td>0.125395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>C_WTHR_Q</td>\n",
       "      <td>0.125240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>antiguedad_Menos de 2</td>\n",
       "      <td>0.125024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>C_CONF_04</td>\n",
       "      <td>0.121313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>P_PSN_99</td>\n",
       "      <td>0.119751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>C_RCFG_07</td>\n",
       "      <td>0.119748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>V_ID_99</td>\n",
       "      <td>0.114033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>V_TYPE_10</td>\n",
       "      <td>0.111110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>C_MNTH_3</td>\n",
       "      <td>0.100774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>P_PSN_QQ</td>\n",
       "      <td>0.100343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>C_MNTH_5</td>\n",
       "      <td>0.099703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>C_RSUR_9</td>\n",
       "      <td>0.099498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>V_TYPE_05</td>\n",
       "      <td>0.098043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>P_PSN_31</td>\n",
       "      <td>0.094954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>C_MNTH_UU</td>\n",
       "      <td>0.094322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>C_TRAF_13</td>\n",
       "      <td>0.093437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>V_TYPE_14</td>\n",
       "      <td>0.090575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>P_USER_5</td>\n",
       "      <td>0.090575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>C_TRAF_07</td>\n",
       "      <td>0.086332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>V_TYPE_21</td>\n",
       "      <td>0.084351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>C_WDAY_6</td>\n",
       "      <td>0.081523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>antiguedad_Entre 16 y 20</td>\n",
       "      <td>0.076858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>P_USER_3</td>\n",
       "      <td>0.070869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C_MNTH_4</td>\n",
       "      <td>0.070353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>V_TYPE_QQ</td>\n",
       "      <td>0.068113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>C_MNTH_11</td>\n",
       "      <td>0.064304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>P_PSN_13</td>\n",
       "      <td>0.061353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>C_RSUR_Q</td>\n",
       "      <td>0.061130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>C_WDAY_4</td>\n",
       "      <td>0.058286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>C_HOUR_Tarde</td>\n",
       "      <td>0.057386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>C_RCFG_10</td>\n",
       "      <td>0.056267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>C_RALN_Q</td>\n",
       "      <td>0.048864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>P_SAFE_10</td>\n",
       "      <td>0.047436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>C_CONF_32</td>\n",
       "      <td>0.046613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>antiguedad_Entre 6 y 10</td>\n",
       "      <td>0.041164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>antiguedad_Entre 2 y 5</td>\n",
       "      <td>0.034110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>V_TYPE_11</td>\n",
       "      <td>0.031748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>C_RSUR_6</td>\n",
       "      <td>0.026436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>V_TYPE_09</td>\n",
       "      <td>0.023554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>C_RALN_5</td>\n",
       "      <td>0.015741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>P_AGE_Entre 25 y 40</td>\n",
       "      <td>0.014628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>P_USER_2</td>\n",
       "      <td>0.011748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>C_TRAF_09</td>\n",
       "      <td>0.008551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>C_VEHS_2</td>\n",
       "      <td>0.007985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>C_WDAY_5</td>\n",
       "      <td>0.004875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>P_PSN_97</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Variable  Coeficiente\n",
       "93                  C_TRAF_10     1.989765\n",
       "35                  C_CONF_21     1.892185\n",
       "135                   P_ID_05     1.675825\n",
       "162                 P_SAFE_02     1.577514\n",
       "40                  C_CONF_31     1.571592\n",
       "111                 V_ID_Otro     1.552217\n",
       "95                  C_TRAF_12     1.331272\n",
       "116                 V_TYPE_08     1.270244\n",
       "136                 P_ID_Otro     1.247632\n",
       "166                 P_SAFE_13     1.233890\n",
       "139                   P_SEX_U     1.194501\n",
       "167                 P_SAFE_NN     1.155719\n",
       "46                  C_CONF_41     1.143354\n",
       "85                  C_TRAF_02     1.063403\n",
       "169                 P_SAFE_UU     1.022424\n",
       "134                   P_ID_04     1.020085\n",
       "143           P_AGE_Mas de 70     0.993523\n",
       "37                  C_CONF_23     0.968588\n",
       "84                   C_RALN_U     0.954069\n",
       "131                 V_TYPE_UU     0.951945\n",
       "100                 C_TRAF_18     0.915978\n",
       "51                  C_RCFG_04     0.908313\n",
       "55                  C_RCFG_08     0.906985\n",
       "71                   C_RSUR_5     0.897940\n",
       "124                 V_TYPE_19     0.892149\n",
       "133                   P_ID_03     0.828075\n",
       "29                C_VEHS_Otro     0.819656\n",
       "39                  C_CONF_25     0.799383\n",
       "24                   C_VEHS_4     0.790679\n",
       "163                 P_SAFE_09     0.781285\n",
       "50                  C_RCFG_03     0.755242\n",
       "86                  C_TRAF_03     0.754961\n",
       "89                  C_TRAF_06     0.741402\n",
       "146                  P_AGE_UU     0.739677\n",
       "53                  C_RCFG_06     0.729117\n",
       "115                 V_TYPE_07     0.720941\n",
       "64                   C_WTHR_6     0.702461\n",
       "168                 P_SAFE_QQ     0.692895\n",
       "38                  C_CONF_24     0.689389\n",
       "101                 C_TRAF_QQ     0.679093\n",
       "125                 V_TYPE_20     0.653345\n",
       "151                  P_PSN_23     0.633209\n",
       "28                  C_VEHS_04     0.630972\n",
       "155                  P_PSN_96     0.610656\n",
       "87                  C_TRAF_04     0.580873\n",
       "69                   C_RSUR_3     0.573692\n",
       "70                   C_RSUR_4     0.566017\n",
       "82                   C_RALN_6     0.559282\n",
       "123                 V_TYPE_18     0.540693\n",
       "88                  C_TRAF_05     0.535278\n",
       "109                   V_ID_04     0.507728\n",
       "27                  C_VEHS_03     0.506001\n",
       "97                  C_TRAF_15     0.499857\n",
       "68                   C_RSUR_2     0.494782\n",
       "102                 C_TRAF_UU     0.482819\n",
       "98                  C_TRAF_16     0.480484\n",
       "122                 V_TYPE_17     0.460466\n",
       "172                  P_USER_4     0.460466\n",
       "129                 V_TYPE_NN     0.459580\n",
       "132                   P_ID_02     0.455606\n",
       "121                 V_TYPE_16     0.453837\n",
       "23                   C_VEHS_3     0.448834\n",
       "19               C_HOUR_Noche     0.446088\n",
       "104                    V_ID_3     0.441183\n",
       "127                 V_TYPE_22     0.439585\n",
       "112                   V_ID_UU     0.439334\n",
       "74                   C_RSUR_8     0.434944\n",
       "49                  C_RCFG_02     0.432452\n",
       "67                   C_WTHR_U     0.432361\n",
       "128                 V_TYPE_23     0.430915\n",
       "48                  C_CONF_UU     0.428870\n",
       "8                   C_MNTH_10     0.412600\n",
       "165                 P_SAFE_12     0.411829\n",
       "36                  C_CONF_22     0.387389\n",
       "145                  P_AGE_NN     0.386467\n",
       "80                   C_RALN_4     0.384200\n",
       "33                  C_CONF_05     0.369087\n",
       "138                   P_SEX_N     0.366501\n",
       "47                  C_CONF_QQ     0.363872\n",
       "45                  C_CONF_36     0.359781\n",
       "137                   P_SEX_M     0.340782\n",
       "79                   C_RALN_3     0.338265\n",
       "108                   V_ID_03     0.336677\n",
       "161                  P_PSN_UU     0.331953\n",
       "10                  C_MNTH_12     0.331695\n",
       "94                  C_TRAF_11     0.328394\n",
       "78                   C_RALN_2     0.311754\n",
       "174                  P_USER_U     0.309707\n",
       "13                   C_WDAY_3     0.307939\n",
       "99                  C_TRAF_17     0.292841\n",
       "43                  C_CONF_34     0.275612\n",
       "159                  P_PSN_NN     0.263937\n",
       "5                    C_MNTH_7     0.263084\n",
       "141       P_AGE_Entre 40 y 55     0.263045\n",
       "56                  C_RCFG_09     0.262873\n",
       "7                    C_MNTH_9     0.255194\n",
       "107                   V_ID_02     0.246764\n",
       "73                   C_RSUR_7     0.246123\n",
       "142       P_AGE_Entre 55 y 70     0.244798\n",
       "150                  P_PSN_22     0.242687\n",
       "157                  P_PSN_98     0.234540\n",
       "103                    V_ID_2     0.227980\n",
       "60                   C_WTHR_2     0.226466\n",
       "63                   C_WTHR_5     0.221834\n",
       "31                  C_CONF_03     0.218884\n",
       "0                    C_MNTH_2     0.214952\n",
       "91                  C_TRAF_08     0.213926\n",
       "34                  C_CONF_06     0.209989\n",
       "114                 V_TYPE_06     0.208332\n",
       "106                   V_ID_01     0.206594\n",
       "144         P_AGE_Menos de 18     0.202749\n",
       "18                   C_WDAY_U     0.202605\n",
       "12                   C_WDAY_2     0.201344\n",
       "154                  P_PSN_33     0.198333\n",
       "77                   C_RSUR_U     0.195745\n",
       "65                   C_WTHR_7     0.191844\n",
       "6                    C_MNTH_8     0.191050\n",
       "26                  C_VEHS_02     0.190713\n",
       "62                   C_WTHR_4     0.189015\n",
       "21                  C_HOUR_UU     0.184943\n",
       "105                   V_ID_99     0.184902\n",
       "58                  C_RCFG_QQ     0.178432\n",
       "42                  C_CONF_33     0.177184\n",
       "149                  P_PSN_21     0.174892\n",
       "4                    C_MNTH_6     0.174598\n",
       "61                   C_WTHR_3     0.161739\n",
       "17                   C_WDAY_7     0.160756\n",
       "147                  P_PSN_12     0.158118\n",
       "178      antiguedad_Mas de 20     0.155172\n",
       "52                  C_RCFG_05     0.154605\n",
       "30                  C_CONF_02     0.154591\n",
       "153                  P_PSN_32     0.152184\n",
       "25                  C_VEHS_01     0.132121\n",
       "44                  C_CONF_35     0.130409\n",
       "59                  C_RCFG_UU     0.125395\n",
       "66                   C_WTHR_Q     0.125240\n",
       "179     antiguedad_Menos de 2     0.125024\n",
       "32                  C_CONF_04     0.121313\n",
       "158                  P_PSN_99     0.119751\n",
       "54                  C_RCFG_07     0.119748\n",
       "110                   V_ID_99     0.114033\n",
       "118                 V_TYPE_10     0.111110\n",
       "1                    C_MNTH_3     0.100774\n",
       "160                  P_PSN_QQ     0.100343\n",
       "3                    C_MNTH_5     0.099703\n",
       "75                   C_RSUR_9     0.099498\n",
       "113                 V_TYPE_05     0.098043\n",
       "152                  P_PSN_31     0.094954\n",
       "11                  C_MNTH_UU     0.094322\n",
       "96                  C_TRAF_13     0.093437\n",
       "120                 V_TYPE_14     0.090575\n",
       "173                  P_USER_5     0.090575\n",
       "90                  C_TRAF_07     0.086332\n",
       "126                 V_TYPE_21     0.084351\n",
       "16                   C_WDAY_6     0.081523\n",
       "175  antiguedad_Entre 16 y 20     0.076858\n",
       "171                  P_USER_3     0.070869\n",
       "2                    C_MNTH_4     0.070353\n",
       "130                 V_TYPE_QQ     0.068113\n",
       "9                   C_MNTH_11     0.064304\n",
       "148                  P_PSN_13     0.061353\n",
       "76                   C_RSUR_Q     0.061130\n",
       "14                   C_WDAY_4     0.058286\n",
       "20               C_HOUR_Tarde     0.057386\n",
       "57                  C_RCFG_10     0.056267\n",
       "83                   C_RALN_Q     0.048864\n",
       "164                 P_SAFE_10     0.047436\n",
       "41                  C_CONF_32     0.046613\n",
       "177   antiguedad_Entre 6 y 10     0.041164\n",
       "176    antiguedad_Entre 2 y 5     0.034110\n",
       "119                 V_TYPE_11     0.031748\n",
       "72                   C_RSUR_6     0.026436\n",
       "117                 V_TYPE_09     0.023554\n",
       "81                   C_RALN_5     0.015741\n",
       "140       P_AGE_Entre 25 y 40     0.014628\n",
       "170                  P_USER_2     0.011748\n",
       "92                  C_TRAF_09     0.008551\n",
       "22                   C_VEHS_2     0.007985\n",
       "15                   C_WDAY_5     0.004875\n",
       "156                  P_PSN_97     0.000000"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vemos el peso y lo importante que es cada variable para nuestro modelo por su coeficiente\n",
    "\n",
    "peso_data.columns = ['Variable', 'Coeficiente']\n",
    "peso_data['Coeficiente']=peso_data['Coeficiente'].apply(abs)\n",
    "peso_data.sort_values('Coeficiente', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rDDBwWUDv-uE",
    "outputId": "f8d9db2e-30a6-469c-eea5-383327073359"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.982615369349995"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vemos la precisión de nuestro modelo de si habra fallecidos mediante regresión logística, en el cual obtenemos una precisión del 0.98\n",
    "prediccion=RegresionLog.predict(x_test_fallecido)\n",
    "AcurracyRegLog = accuracy_score(y_test_fallecido,prediccion)\n",
    "AcurracyRegLog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6BWcimTnx-yq",
    "outputId": "264af595-551e-4964-cfe4-b37068a497cf"
   },
   "outputs": [],
   "source": [
    "#MODELO INTERVENCIÓN MÉDICA \n",
    "\n",
    "train_df_herido=train_df.drop('C_SEV_2', axis=1)\n",
    "test_df_herido=test_df.drop('C_SEV_2', axis=1)\n",
    "y_train_herido=train_df_herido['P_ISEV_1']\n",
    "x_train_herido=train_df_herido.drop('P_ISEV_1', axis=1)\n",
    "y_test_herido=test_df_herido['P_ISEV_1']\n",
    "x_test_herido=test_df_herido.drop('P_ISEV_1', axis=1)\n",
    "\n",
    "RegresionLog2 = LogisticRegression(random_state=100)\n",
    "RegresionLog2.fit(x_train_herido,y_train_herido)\n",
    "prediccion_herido = RegresionLog2.predict(x_test_herido)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5D1EOzdTy4bk",
    "outputId": "dcd8be5d-8bd8-4708-d7a1-39d52997811c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6992367772519527\n",
      "Recall: 0.777591543871161\n",
      "Precission: 0.7459447809420527\n",
      "Precission: 0.716773228579412\n",
      "Confussion matrix: \n",
      "[[127256  86159]\n",
      " [ 62366 218046]]\n",
      "AUC: 0.7717986977642096\n"
     ]
    }
   ],
   "source": [
    "#Estudiamos su accuracy, precision, recall, f1 score, matriz de confusión y su AuC\n",
    "\n",
    "Accuracy = accuracy_score(y_test_herido,prediccion_herido)\n",
    "Precission = precision_score(y_test_herido,prediccion_herido)\n",
    "Recall = recall_score(y_test_herido,prediccion_herido)\n",
    "f1_score = f1_score(y_test_herido,prediccion_herido)\n",
    "matrizconfusion = confusion_matrix(y_test_herido,prediccion_herido)\n",
    "predictions = RegresionLog2.predict_proba(x_test_herido)[:,1]\n",
    "AUC = roc_auc_score(y_test_herido, predictions)\n",
    "fp_log,tp_log, x_log= roc_curve(y_test_herido, predictions)\n",
    "\n",
    "print('Accuracy: '+str(Accuracy) )\n",
    "\n",
    "print('Recall: '+str(Recall) )\n",
    "print('Precission: '+str(f1_score) )\n",
    "print('Precission: '+str(Precission) )\n",
    "print('Confussion matrix: ' )\n",
    "print(matrizconfusion)\n",
    "print('AUC: ' + str(AUC))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 342
    },
    "id": "zRcDHLZG0U7G",
    "outputId": "3ba934af-0779-4ad7-f25d-8f190e2d0657"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 257.44, 'Predicted label')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizamos la matriz de confusion\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "sns.heatmap(pd.DataFrame(matrizconfusion), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n",
    "ax.xaxis.set_label_position(\"top\")\n",
    "plt.tight_layout()\n",
    "plt.title('Confusion matrix', y=1.1)\n",
    "plt.ylabel('Actual label')\n",
    "plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "id": "bRHKARYf1IJI",
    "outputId": "271ddd07-b08a-4d45-f436-f9ae5c657393"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizamos la curva ROC y vemos el AuC\n",
    "\n",
    "def plot_roc_curve(fp_log, tp_log):\n",
    "    plt.plot(fp_log, tp_log, color=\"orange\", label=\"ROC\")\n",
    "    plt.plot([0, 1], [0, 1], color=\"b\", linestyle=\"--\")\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC Curve')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "plot_roc_curve(fp_log,tp_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Tambien podriamos probar con random forest. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creación del modelo\n",
    "# ==============================================================================\n",
    "modelo = RandomForestRegressor(\n",
    "            n_estimators = 10,\n",
    "            criterion    = 'mse',\n",
    "            max_depth    = None,\n",
    "            max_features = 'auto',\n",
    "            oob_score    = False,\n",
    "            n_jobs       = -1,\n",
    "            random_state = 123\n",
    "         )\n",
    "\n",
    "# Entrenamiento del modelo\n",
    "# ==============================================================================\n",
    "modelo.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PWopFsrXXFyU"
   },
   "source": [
    "**6-Libertad para generar análisis de valor y nuevas ideas. Se debe atacar mínimo un modelo (estimar si habrá fallecidos o no). Hecho esto, se puede plantear de forma opcional otros alcances (libertad para plantear opciones)**\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Sk-HLRCtXGBz",
    "outputId": "e25ce8e9-7afb-41f2-aeb7-51e81fa02a5f"
   },
   "outputs": [],
   "source": [
    "#Modelo con KNN\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "model = KNeighborsClassifier(n_neighbors=20)\n",
    "model.fit(x_train_herido,y_train_herido)\n",
    "\n",
    "predict= model.predict(x_test_herido)\n",
    "print(predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "nXR0b6z72SEH",
    "outputId": "741ecd56-c7fe-42d8-e4d6-e838f196412c"
   },
   "outputs": [],
   "source": [
    "AccuracyKnn = accuracy_score(y_test_herido,predict)\n",
    "PrecisionKnn = precision_score(y_test_herido,predict)\n",
    "RecallKnn = recall_score(y_test_herido,predict)\n",
    "ConfusionMatrixKnn = confusion_matrix(y_test_herido,predict)\n",
    "PredictKnn = RegresionLog2.predict_proba(x_test_herido)[:,1]\n",
    "AuC_Knn = roc_auc_score(y_test_herido, PredictKnn)\n",
    "fp_log,tp_log, x_log= roc_curve(y_test_herido, PredictKnn)\n",
    "\n",
    "print('Accuracy: '+str(AccuracyKnn) )\n",
    "\n",
    "print('Recall: '+str(RecallKnn) )\n",
    "print('Precission: '+str(PrecisionKnn) )\n",
    "print('Confussion matrix: ' )\n",
    "print(ConfusionMatrixKnn)\n",
    "print('AUC: ' + str(AuC_Knn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 341
    },
    "id": "w0Au9iX57EqX",
    "outputId": "db66ca05-ae46-4886-fa79-6e888ef82244"
   },
   "outputs": [],
   "source": [
    "#Visualizamos la matriz de confusion\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "sns.heatmap(pd.DataFrame(ConfusionMatrixKnn), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n",
    "ax.xaxis.set_label_position(\"top\")\n",
    "plt.tight_layout()\n",
    "plt.title('Confusion matrix', y=1.1)\n",
    "plt.ylabel('Actual label')\n",
    "plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "id": "3a--vcB27U8A",
    "outputId": "a23e10a4-da23-4ab9-fd43-4f929ddd7f71"
   },
   "outputs": [],
   "source": [
    "#Visualizamos la cruva ROC y AuC\n",
    "\n",
    "def plot_roc_curve(fp_log, tp_log):\n",
    "    plt.plot(fp_log, tp_log, color=\"orange\", label=\"ROC\")\n",
    "    plt.plot([0, 1], [0, 1], color=\"b\", linestyle=\"--\")\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC Curve')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "plot_roc_curve(fp_log,tp_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 381
    },
    "id": "dEC9jzCS2VOI",
    "outputId": "9d177623-1bcf-4661-bc5e-7f00dc2e75a7"
   },
   "outputs": [],
   "source": [
    "#Con Arbol de decision\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "arbol = RandomForestClassifier(n_estimators=800, min_samples_split=i)\n",
    "\n",
    "arbol.fit(x_train_herido,y_train_herido)\n",
    "PrediccionArbol=arbol.predict(x_train_herido)\n",
    "AccuracyArbol = accuracy_score(y_train_herido,PrediccionArbol)\n",
    "    \n",
    "print('Train')\n",
    "print('Accuracy : '+str(AccuracyArbol) )    \n",
    "PrediccionArbol=arbol.predict(x_test_herido)\n",
    "AccuracyArbol = accuracy_score(y_test_herido,PrediccionArbol)\n",
    "print('Test')\n",
    "print('Accuracy : '+str(AccuracyArbol) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "39s86Fn_XQQ5"
   },
   "source": [
    "**7-Plus: complementar con datos abiertos de clima (aunque Canadá es muy grande) y de otra tipología, ¿hay algún tipo de relación con temperaturas medias, precipitación media del día/mes, nieve...? ¿a más días festivos o de vacaciones, más accidentes? etc. ***\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 436
    },
    "id": "Z7HhDn4cXQga",
    "outputId": "d1458227-696a-4f7a-ad6a-64df47344956"
   },
   "outputs": [],
   "source": [
    "from matplotlib.pyplot import figure\n",
    "figure(figsize=(10,8 ), dpi=60)\n",
    "plt.bar(distribucionvariables['C_WTHR'].index,distribucionvariables['C_WTHR']['percentage'] , color='b')\n",
    "plt.title(\"Distribución variable tiempo\")\n",
    "\n",
    "#Se puede observar que los días con mayor accidentes son los soleados (debido a su mayor participación), seguido de \n",
    "# de los dias nublados/lluviosos/nieve de manera igualada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "79gREMiz_W8g"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CplXHxzCt0rz"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Practica final_JDA_ARR",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
